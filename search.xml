<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[SSM框架电商网站实训项目--第二周总结]]></title>
    <url>%2Fyinziang%2F2018%2F01%2F19%2FProjectWeekTwo%2F</url>
    <content type="text"><![CDATA[描述本人本周的工作情况，包括学习内容、项目工作内容和个人任务完成进度主要学习了： JS在前端的一些基础用法 项目工作方面： 讨论具体的需求实现问题 参与小组的项目原型文档的编写 完成商品评论模块需要实现的的类和函数 个人任务完成进度： 电商网站的商品评价功能从数据库到前台展示的编写]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Study</tag>
        <tag>Work</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSM框架电商网站实训项目--第一周总结]]></title>
    <url>%2Fyinziang%2F2018%2F01%2F12%2FProjectWeekOne%2F</url>
    <content type="text"><![CDATA[描述本人本周的工作情况，包括学习内容、项目工作内容和个人任务完成进度主要学习了： Spring和MyBatis框架的基本知识、核心配置 SSM框架的整合demo–小型图书管理系统编写 项目工作方面： 帮助确立了小组公共的IDE和版本控制工具 参与需求文档的讨论，了解电商网站的几大模块 思考这些模块该如何实现，准备项目原型文档的编写 个人任务完成进度： 电商网站的开发，正在如火如荼的进行前期知识补强，并且有积极参与小组的需求讨论，特别是需求文档中和自己有关的部分]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Study</tag>
        <tag>Work</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MyBatis First Demo]]></title>
    <url>%2Fyinziang%2F2018%2F01%2F10%2FMyBatisFirstDemo%2F</url>
    <content type="text"><![CDATA[实践中入门，MyBatis框架小程序 1. 基本学习MyBatis的执行流程·： mybatis配置文件，包括Mybatis全局配置文件和Mybatis映射文件，其中全局配置文件配置了数据源、事务等信息；映射文件配置了SQL执行相关的信息 mybatis通过读取配置文件信息（全局配置文件和映射文件），构造出SqlSessionFactory，即会话工厂 通过SqlSessionFactory，可以创建SqlSession(即会话,Mybatis是通过SqlSession来操作数据库的) SqlSession本身不能直接操作数据库，它是通过底层的Executor执行器接口来操作数据库的。Executor接口有两个实现类，一个是普通执行器，一个是缓存执行器（默认） Executor执行器要处理的SQL信息是封装到一个底层对象MappedStatement中。该对象包括：SQL语句、输入参数映射信息、输出结果集映射信息。其中输入参数和输出结果的映射类型包括java的简单类型、HashMap集合对象、POJO对象类型 2. 环境配置IDEA Maven项目数据库环境: MySQLMyBatisMaven三维坐标123456&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;&lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;3.4.1&lt;/version&gt;&lt;/dependency&gt; 3. demo编写测试代码123456789101112131415public class UserDaoImpl implements UserDao1 &#123; // 此处选用namespace为&quot;user&quot;，选用此处方法需将UserMapper.xml文件中namespace改过来 public User findUserById(int id) throws Exception &#123; String resource = &quot;mybatis-config1.xml&quot;; InputStream inputStream = Resources.getResourceAsStream(resource); SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(inputStream); SqlSession session = factory.openSession(); //--------------- User user = session.selectOne(&quot;user.findUserById&quot;,id); //参数一：namespace.id //-------------- session.close(); return user; &#125;&#125; Mapper映射配置文件123456789101112131415161718&lt;!--&lt;mapper namespace=&quot;user&quot;&gt;--&gt;&lt;mapper namespace=&quot;user&quot;&gt; &lt;select id=&quot;findAllUsers&quot; resultType=&quot;com.yza.demo1.entity.User&quot;&gt; SELECT * FROM USER &lt;/select&gt; &lt;select id=&quot;insertUser&quot; parameterType=&quot;com.yza.demo1.entity.User&quot;&gt; INSERT INTO USER(id,userName,password,age) VALUES(#&#123;id&#125;,#&#123;userName&#125;,#&#123;password&#125;,#&#123;age&#125;) &lt;/select&gt; &lt;select id=&quot;deleteUserById&quot; parameterType=&quot;int&quot; &gt; DELETE FROM USER WHERE id=#&#123;id&#125; &lt;/select&gt; &lt;select id=&quot;updateUserPassword&quot; parameterType=&quot;com.yza.demo1.entity.User&quot;&gt; UPDATE USER SET password=#&#123;password&#125; WHERE id=#&#123;id&#125; &lt;/select&gt; &lt;select id=&quot;findUserById&quot; parameterType=&quot;int&quot; resultType=&quot;com.yza.demo1.entity.User&quot;&gt; SELECT * FROM USER WHERE id=#&#123;id&#125; &lt;/select&gt;&lt;/mapper&gt; Mapper接口12345678public interface UserDao1 &#123; public User findUserById(int id) throws Exception; public List&lt;User&gt; findAllUsers() throws Exception; public void insertUser(User user) throws Exception; public void deleteUserById(int id) throws Exception; public void updateUserPassword(User user) throws Exception;&#125; 4. 升级版–Mapper代理开发模式 Mapper代理的开发方式，程序员只需要编写mapper接口（相当于dao接口），不需再编写dao实现类（Mybatis会自动的为mapper接口生成动态代理实现类） 要实现mapper代理的开发方式，需要遵循一些开发规范（接口的包名，类名，参数，返回值分别对应着映射文件的namespace，id，parameterType，resultType） mapper接口的全限定名要和mapper映射文件的namespace的值相同 mapper接口的方法名称要和mapper映射文件中的statement的id相同 mapper接口的方法参数只能有一个，且类型要和mapper映射文件中statement的parameterType的值保持一致 mapper接口的返回值类型要和mapper映射文件中statement的resultType值或resultMap中的type值保持一致 UserMapper映射文件1234567891011121314151617181920212223&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE mapperPUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;!-- mapper标签要指定namespace属性，设置为Mapper接口的全路径名--&gt;&lt;mapper namespace=&quot;com.yza.demo1.dao.UserDao&quot;&gt; &lt;select id=&quot;findAllUsers&quot; resultType=&quot;com.yza.demo1.entity.User&quot;&gt; SELECT * FROM USER &lt;/select&gt; &lt;select id=&quot;insertUser&quot; parameterType=&quot;com.yza.demo1.entity.User&quot;&gt; INSERT INTO USER(id,userName,password,age) VALUES(#&#123;id&#125;,#&#123;userName&#125;,#&#123;password&#125;,#&#123;age&#125;) &lt;/select&gt; &lt;select id=&quot;deleteUserById&quot; parameterType=&quot;int&quot; &gt; DELETE FROM USER WHERE id=#&#123;id&#125; &lt;/select&gt; &lt;select id=&quot;updateUserPassword&quot; parameterType=&quot;com.yza.demo1.entity.User&quot;&gt; UPDATE USER SET password=#&#123;password&#125; WHERE id=#&#123;id&#125; &lt;/select&gt; &lt;select id=&quot;findUserById&quot; parameterType=&quot;int&quot; resultType=&quot;com.yza.demo1.entity.User&quot;&gt; SELECT * FROM USER WHERE id=#&#123;id&#125; &lt;/select&gt;&lt;/mapper&gt; Mapper接口1234567public interface UserMapper &#123; public User findUserById(int id); public List&lt;User&gt; findUserAll(); public void insertUser(User user); public void deleteUserById(int id); public void updateUserPassword(User user);&#125; 报错1报错具体信息12### Error querying database. Cause: java.lang.IllegalArgumentException: Mapped Statements collection does not contain value for user.findUserById### Cause: java.lang.IllegalArgumentException: Mapped Statements collection does not contain value for user.findUserById 本质原因–mapper文件的namespace和DaoImpl路径不一致mapper文件1234567&lt;!-- mapper标签要指定namespace属性，不然会报错，可看做包名 --&gt;&lt;mapper namespace=&quot;com.yza.demo1.dao.UserDao&quot;&gt;&lt;!--&lt;mapper namespace=&quot;user&quot;&gt;--&gt; &lt;select id=&quot;findUserById&quot; parameterType=&quot;int&quot; resultType=&quot;com.yza.demo1.entity.User&quot;&gt; select * from user where id=#&#123;id&#125; &lt;/select&gt;&lt;/mapper&gt; DaoImpl方法–&gt;此处namespace为”user”1234567891011121314public class UserDaoImpl implements UserDao &#123; public User findUserById(int id) throws Exception &#123; String resource = &quot;mybatis-config.xml&quot;; InputStream inputStream = Resources.getResourceAsStream(resource); SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(inputStream); SqlSession session = factory.openSession(); //--------------- User user = session.selectOne(&quot;user.findUserById&quot;,id); //参数一：namespace.id //-------------- session.close(); return user; &#125;&#125; 总结： namespace：必须与UserDao的全路径想匹配，这样才能使的接口与sql文件一一对应 报错2 使用Java和MyBatis时遇到的数据无法插入问题解决办法–&gt;手动commit session关闭前不会自动提交 手动commit、close，两次导入数据库，报错解决办法：关闭是必须的，就不再提交commit 12345678910public static void main(String[] args) throws Exception &#123; SqlSession sqlSession = SqlSessionFactoryUtil.openSession(); UserDao userDao = sqlSession.getMapper(UserDao.class); User user = new User(3,&quot;yinziyang&quot;,&quot;111111&quot;,22); userDao.insertUser(user); //sqlSession.commit(); sqlSession.close(); &#125; 附录：MyBatisUtil工具类123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.*;import java.io.InputStream;public class SqlSessionFactoryUtil &#123; private static SqlSessionFactory sqlSessionFactory; /** * 初始化sqlSessionFactory */ static &#123; getSqlSessionFactory(); &#125; /** * 获取SqlSessionFactory * @return */ public static SqlSessionFactory getSqlSessionFactory() &#123; if(sqlSessionFactory==null) &#123; InputStream inputStream = null; try &#123; inputStream = Resources.getResourceAsStream(&quot;mybatis-config.xml&quot;); sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); &#125; catch(Exception e) &#123; e.printStackTrace(); &#125; &#125; return sqlSessionFactory; &#125; /** * 获取SqlSession * @return */ public static SqlSession openSession() &#123; return sqlSessionFactory.openSession(); &#125; /** * 关闭SqlSession * @param sqlSession */ public static void clSSoseSession(SqlSession sqlSession) &#123; if(sqlSession != null) &#123; sqlSession.close(); &#125; &#125;&#125; 参考 MyBatis学习（1）：Mybatis使用详解和入门案例]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Study</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Work Report]]></title>
    <url>%2Fyinziang%2F2018%2F01%2F09%2Fworkreport%2F</url>
    <content type="text"><![CDATA[小结截止到2018年1月9日，约两周的自学小结。 研一上学期的课程学习告一段落已经两个星期了。也算是自己摸索着准备春季实习招聘两周了 起初的计划是先准备一个项目，同时准备算法等基本功，同道小新又指导我搭建了个人博客，就计划着三驾马车并行 慢慢发现： 博客的整理比较花功夫，而且比较零散，牵一发而动全身，可以考虑周末抽出整块时间来做，平时还是以项目为主 算法的整理可以考虑先做，先纸质版打印出来练着，等练习充分了再抽空分块整理 项目的准备，现在处在学习阶段，各方面还不成熟，可以考虑其每天所花时间不超过50% 然后找已经拿到大厂offer的前辈，取经如下： 重视基础，项目次要 实习面试时项目经验缺乏，基础补充 常问自己，LeetCode、剑指Offer刷了吗？虚拟机看了吗？等等等等 定个小目标，年前 完成上述两个题库的常考题型，然后整理一遍 基本掌握SpringMVC、Spring、MyBatis框架项目，掌握Spring框架 掌握Java Core基本知识并刷题]]></content>
      <categories>
        <category>Others</category>
      </categories>
      <tags>
        <tag>Study</tag>
        <tag>Work</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git Guide]]></title>
    <url>%2Fyinziang%2F2018%2F01%2F08%2FGitGuide%2F</url>
    <content type="text"><![CDATA[Git版本控制关于Git版本控制的一些笔记，以及在windows下的一些常规操作 Note1. 三棵树：工作目录、暂存区域和Git仓库Working Directory &lt;-&gt; Stage(Index) &lt;-&gt; Repository(Head)工作目录：平时存放项目的地方暂存区域：一个文件，存放临时的改动，即将提交到仓库的列表信息Git仓库：最终存放版本数据的位置(HEAD指针指向最新版本) 2. 将每个版本独立保存3. Git管理的文件的三种状态 已修改(modified) 已暂存(staged) 已提交(committed) Git的工作流程一般工作流程 在工作目录中添加、修改文件 将需要进行版本管理的文件放入暂存区域 将暂存区域的文件提交到Git仓库 1.在工作目录中添加、修改文件(自己操作)1234C:\Users\Administrator\Documents\GitHub&gt;cd MyProjectC:\Users\Administrator\Documents\GitHub\MyProject&gt;git initInitialized empty Git repository in C:/Users/Administrator/Documents/GitHub/MyProject/.git/ 2.将需要进行版本管理的文件放入暂存区域(没提示信息即ok)1C:\Users\Administrator\Documents\GitHub\MyProject&gt;git add README.md 3.将暂存区域的文件提交到Git仓库commit命令 双引号内是本次提交的说明 1234C:\Users\Administrator\Documents\GitHub\MyProject&gt;git commit -m &quot;add a readme file&quot;[master (root-commit) cbdab70] add a readme file 1 file changed, 0 insertions(+), 0 deletions(-) create mode 100644 README.md 实战 将工作目录的文件放到Git仓库只需要两步 -git add 文件名 -git commit -m “你干了啥，新版本注释” 查看状态1git status 显示Untracked files，工作目录新添加、修改的文件而未添加到暂存区域或提交到Git仓库 12345678C:\Users\Administrator\Documents\GitHub\MyProject&gt;git add LICENSEC:\Users\Administrator\Documents\GitHub\MyProject&gt;git statusOn branch masterChanges to be committed: (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage) new file: LICENSE 回滚1git reset HEAD 可以让最近一次提交到Git仓库的文件回到暂存区域 1git reset HEAD &lt;file&gt; 可以让file文件从Git仓库回到暂存区域 123456789101112131415161718192021222324252627282930313233343536C:\Users\Administrator\Documents\GitHub\MyProject&gt;git reset HEADC:\Users\Administrator\Documents\GitHub\MyProject&gt;git statusOn branch masterUntracked files: (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed) LICENSEnothing added to commit but untracked files present (use &quot;git add&quot; to track)C:\Users\Administrator\Documents\GitHub\MyProject&gt;git commit -m &quot;add a LICENSE file&quot;On branch masterUntracked files: LICENSEnothing added to commit but untracked files presentC:\Users\Administrator\Documents\GitHub\MyProject&gt;git add LICENSEC:\Users\Administrator\Documents\GitHub\MyProject&gt;git statusOn branch masterChanges to be committed: (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage) new file: LICENSEC:\Users\Administrator\Documents\GitHub\MyProject&gt;git commit -m &quot;add a readme file&quot;[master 9ceaa7a] add a readme file 1 file changed, 19 insertions(+) create mode 100644 LICENSEC:\Users\Administrator\Documents\GitHub\MyProject&gt;git statusOn branch masternothing to commit, working tree clean Note：红色表示在工作目录(?)；绿色表示在暂存区域，等待被提交。是否？你查看了工作目录的status，那么文件就默认到暂存区域了，add就提交到Git仓库了 用提交到Git仓库的文件，覆盖工作目录的文件变化1git checkout -- &lt;file&gt; file，如”modified： LICENSE” 查看历史提交1git log 1234567891011121314151617181920C:\Users\Administrator\Documents\GitHub\MyProject&gt;git logcommit 76b5f782d7443442233ae5e050d3c4c8f71968b7Author: 2011301060014@whu.edu.cn &lt;2011301060014@whu.edu.cn&gt;Date: Thu Nov 9 09:00:45 2017 +0800 change the LICENSE filecommit 9ceaa7aea9f293c1189d3bcaf42f653d102a905bAuthor: 2011301060014@whu.edu.cn &lt;2011301060014@whu.edu.cn&gt;Date: Wed Nov 8 21:39:24 2017 +0800 add a readme filecommit cbdab700463d0b214c6f4bb08cc6bba9d30fac41Author: 2011301060014@whu.edu.cn &lt;2011301060014@whu.edu.cn&gt;Date: Wed Nov 8 20:45:23 2017 +0800 add a readme fileC:\Users\Administrator\Documents\GitHub\MyProject&gt; 回到过去参考”reset&amp;checkout.png” 12345sequenceDiagramWorking Directory-&gt;&gt;Stage: addStage-&gt;&gt;Respository: commitRespository-&gt;&gt;Stage: resetStage-&gt;&gt;Working Directory: checkout 附录 – Windows初次使用Git前的配置在命令行模式里输入以下命令： 12-git config -- global user.name &quot;username&quot;-git config -- global user.email &quot;mail&quot; 然后输入 1git config --list 出现邮箱和用户名即ok]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Study</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[New Start]]></title>
    <url>%2Fyinziang%2F2018%2F01%2F07%2FNewStart%2F</url>
    <content type="text"><![CDATA[坑爹之路So Many Bugs !!! 1. 找不到路径已经将java文件夹设为了Source Folder，但是找不到放在根路径下的文件ac.xml，代码中不能以下面的方式访问ApplicationContext context = new ClassPathXmlApplicationContext(&quot;ac.xml&quot;); 解决办法–&gt;将文件放在Resource Folder下“正宗的Maven程序，找东西都去resource下面去找!” 2. 页面跳转 clone的项目Tomcat的路径设置不是默认的”/“。不是Project Structure的路径！ Web项目的路径 主要不是Project Structure Tomcat的路径设置]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Study</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fyinziang%2F2018%2F01%2F07%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Study</tag>
      </tags>
  </entry>
</search>
